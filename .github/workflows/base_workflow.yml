# This is a basic workflow to help you get started with Actions

name: CI

env:
  PROJECT_NAME: "web_calculator"

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  # This workflow contains a single job called "build"
  codeStyle:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Python Style Checker
      uses: andymckay/pycodestyle-action@0.1.3
      continue-on-error: true

  Test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - name: build test container
        run: sudo docker build -t $PROJECT_NAME:_Test -f Dockerfile_for_tests . --build-arg .
      - name: Run testing
        run: |
          mkdir artifacts
          docker run -v `pwd`/artifacts:/tmp $PROJECT_NAME:_Test
          zip -r artifacts.zip artifacts
        continue-on-error: true
      - name: ls
        run: ls
      - uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: artifacts.zip

  Push_to_docker:
   runs-on: self-hosted
   needs: [Test, codeStyle]
   steps:
     - uses: actions/checkout@v2

     - name: Docker build
       run: docker build -t ${{ secrets.DOCKER_LOGIN }}/$PROJECT_NAME:latest .

     - name: Upload to docker hub
       run: |
            docker login --username=${{ secrets.DOCKER_LOGIN }} --password=${{ secrets.DOCKER_PASSWORD }}
            docker push ${{ secrets.DOCKER_LOGIN }}/$PROJECT_NAME:latest

  Deploy:
    runs-on: self-hosted
    needs: [ Push_to_docker ]
    steps:
     - uses: actions/checkout@v2
     - name: ps
       run: docker ps
     - name: img
       run: docker images
     - name: kill existing
       run: docker kill project
       continue-on-error: true
     - name: rm container
       run: docker image rm --force ${{ secrets.DOCKER_LOGIN }}/$PROJECT_NAME:latest
       continue-on-error: true
     - name: rmi container
       run: docker rm project
       continue-on-error: true
     - name: run
       run: docker run -d -p 5000:5000 -e FLASK_APP="js_example" --name project ${{ secrets.DOCKER_LOGIN }}/$PROJECT_NAME:latest
